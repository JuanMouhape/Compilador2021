%token ID CONSTANTE IF ELSE END_IF PRINT THEN BEGIN END LONG SINGLE RETURN FUNC CADENA ERROR BREAK MAYOR_IGUAL MENOR_IGUAL IGUAL DISTINTO ASIGN REPEAT AND OR POST TRY CATCH
%%
id: ID;
cte: CTE;

Factor: id
	|cte
	;

Invocar_funcion: ID '(' Parametro ')'
		| error '(' Parametro ')' {yyerror("No se definio el nombre de la funcion que se está invocando");}
		| ID error Parametro ')' {yyerror("Falta el primer parentesis");}
		| ID '(' Parametro error {yyerror("Falta el segundo parentesis parentesis");}
		| error '(' error ')' {yyerror("Parámetro inválido");}
		;
Termino: Factor
	| Termino '*'  Factor
	| Termino '/' Factor
	| Invocar_funcion
	;

Expresion_bis: Termino
	| Termino '+' Expresion
	| Termino '-' Expresion
	;

Expresion:
	| Tipo '('Expresion_bis')'
	| Tipo error Expresion_bis')'{yyerror("Falta el primer paréntesis");}
	| Tipo '(' Expresion_bis error {yyerror("Falta el segundo paréntesis");}
	| error '(' Expresion_bis')'{yyerror("Falta definir el tipo");}
	;

Asignacion: ID ASIGN Expresion';'
	| error ASIGN Expresion';'{yyerror("Falta el ID");}
	| ID ASIGN error';'{yyerror("Falta la expresion que se asigna");}
	| ID ASIGN Expresion error {yyerror("Falta el ; ");}
	;

Impresion: PRINT '(' CADENA ')' ';'
	| PRINT '(' CADENA ')' error {yyerror("Falta el ; ");}
	| PRINT error CADENA ')' error ';'{yyerror("Falta el primer parentesis");}
	| PRINT '(' CADENA error ';'{yyerror("Falta el segundo parentesis ");}

	;

Comparacion: Expresion '>' Expresion
	     | Expresion '<' Expresion
	     | Expresion MAYOR_IGUAL Expresion
     	     | Expresion MENOR_IGUAL Expresion
	     | Expresion IGUAL Expresion
	     | Expresion DISTINTO Expresion

	     ;
Seleccion: IF '(' Condicion ')' THEN Bloque_sentencias_ejecutables ELSE Bloque_sentencias_ejecutables ENDIF';'
	| IF '(' Condicion ')' THEN Bloque_sentencias_ejecutables ENDIF';'
	| IF error Condicion ')' THEN Bloque_sentencias_ejecutables ENDIF';'{yyerror("Falta primer paréntesis");}
	| IF '(' Condicion error THEN Bloque_sentencias_ejecutables ENDIF';'{yyerror("Falta segundo paréntesis");}
	| IF '(' error ')' THEN Bloque_sentencias_ejecutables ENDIF';'{yyerror("condición inválida");}
	| IF '(' Condicion ')' error Bloque_sentencias_ejecutables ENDIF';'{yyerror("Falta el THEN");}
	| IF '(' Condicion ')' THEN Bloque_sentencias_ejecutables error';'{yyerror("Falta el ENDIF");}
	| IF '(' Condicion ')' THEN Bloque_sentencias_ejecutables ENDIF error {yyerror("Falta el ; ");}
	| IF error Condicion ')' THEN Bloque_sentencias_ejecutables ELSE Bloque_sentencias_ejecutables ENDIF';'{yyerror("Falta primer paréntesis");}
	| IF '(' Condicion error THEN Bloque_sentencias_ejecutables ENDIF';'{yyerror("Falta segundo paréntesis");}
	| IF '(' error ')' THEN Bloque_sentencias_ejecutables ELSE Bloque_sentencias_ejecutables ENDIF';'{yyerror("condición inválida");}
	| IF '(' Condicion ')' error Bloque_sentencias_ejecutables ELSE Bloque_sentencias_ejecutables ENDIF';'{yyerror("Falta el THEN");}
	| IF '(' Condicion ')' THEN Bloque_sentencias_ejecutables error Bloque_sentencias_ejecutables ENDIF';'{yyerror("Falta el ELSE");}
	| IF '(' Condicion ')' THEN Bloque_sentencias_ejecutables ELSE Bloque_sentencias_ejecutables error';'{yyerror("Falta el ENDIF");}
	| IF '(' Condicion ')' THEN Bloque_sentencias_ejecutables ELSE Bloque_sentencias_ejecutables ENDIF error {yyerror("Falta el ; ");}
	;

Condicion: Comparacion
	| Expresion
	| Comparacion AND Comparacion
	| Comparacion OR Comparacion
	| Expresion AND Expresion
	| Expresion OR Expresion
	;

Sentencia_ej: Asignacion
	        | Seleccion
	        | Comparacion
	        | Impresion
		;

Sentencias_ejecutables: Sentencia_ej
	   | Sentencia_ej Sentencias_ejecutables
	   ;

Bloque_sentencias_ejecutables: Sentencia_ejecutable
				| BEGIN Sentencias_ejecutables END
				| error Sentencias_ejecutables END {yyerror("Falta el BEGIN ");}
				| BEGIN Sentencias_ejecutables error {yyerror("Falta el END ");}
				;

Try_Catch: TRY Sentencia_ejecutable CATCH Bloque_sentencias_ejecutables END';'
	;

Tipo: LONG
      | SINGLE
	;

Lista_variables: ID
		| ID ',' Lista_variables
		;
Sentencia_dec: Tipo Lista_variables;

Sentencias_declarativas: Sentencia_dec
			| Sentencia_dec Sentencias_declarativas
			;

Parametro: Tipo ID
	;

Retorno: Expresion
	;

Declaracion_funcion: Tipo FUNC ID '(' Parametro ')' Sentencias_declarativas BEGIN Bloque_sentencias_ejecutables RETURN '(' Retorno ')' END
		| Tipo FUNC ID '(' Parametro ')' Sentencias_declarativas BEGIN Bloque_sentencias_ejecutables RETURN '(' Retorno ')' POST ':' '('  Condicion ')' ';' END
		;

Encabezado_funcion: Tipo FUNC '(' Tipo ')'
		;

Declaracion_variables_tipo_funcion: Encabezado_funcion Lista_variables
		;

Programa: ID Sentencias_declarativas Bloque_sentencias_ejecutables
	;

%%